const axios = require('axios');
const db = require('./db');

const delay = (ms) => new Promise(resolve => setTimeout(resolve, ms));

(async () => {
  try {
    // L·∫•y danh s√°ch t·ªânh
    const provincesRes = await axios.get('https://api.vnappmob.com/api/v2/province/');
    const provinces = provincesRes.data.results;

    for (const province of provinces) {
      const [provinceResult] = await db.execute(
        'INSERT INTO provinces (code, name) VALUES (?, ?) ON DUPLICATE KEY UPDATE name = VALUES(name)',
        [province.province_id, province.province_name]
      );
      const provinceId = province.province_id;

      // L·∫•y danh s√°ch huy·ªán theo t·ªânh
      const districtsRes = await axios.get(`https://vapi.vnappmob.com/api/v2/province/district/${provinceId}`);
      await delay(300); // ngh·ªâ tr√°nh g·ªçi API li√™n t·ª•c
      const districts = districtsRes.data.results;

      for (const district of districts) {
        const [districtResult] = await db.execute(
          'INSERT INTO districts (code, name, province_id) VALUES (?, ?, ?) ON DUPLICATE KEY UPDATE name = VALUES(name)',
          [district.district_id, district.district_name, provinceId]
        );
        const districtId = district.district_id;

        try {
          // L·∫•y danh s√°ch x√£ theo huy·ªán
          const wardsRes = await axios.get(`https://vapi.vnappmob.com/api/v2/province/ward/${districtId}`);
          await delay(300); // ngh·ªâ ti·∫øp gi·ªØa c√°c huy·ªán
          const wards = wardsRes.data.results;

          console.log(`üìç ${district.district_name} (${districtId}) c√≥ ${wards.length} x√£`);

          for (const ward of wards) {
            try {
              await db.execute(
                'INSERT INTO wards (code, name, district_id) VALUES (?, ?, ?) ON DUPLICATE KEY UPDATE name = VALUES(name)',
                [ward.ward_id, ward.ward_name, districtId]
              );
            } catch (wardErr) {
              console.error(`‚ùå L·ªói ch√®n x√£ ${ward.ward_name} (${ward.ward_id}):`, wardErr.message);
            }
          }
        } catch (wardApiErr) {
          console.error(`üö´ L·ªói g·ªçi API x√£ c·ªßa huy·ªán ${district.district_name} (${districtId}):`, wardApiErr.message);
        }
      }

      console.log(`‚úÖ ƒê√£ ch√®n xong t·ªânh: ${province.province_name}`);
    }

    console.log('üéâ ƒê√£ ho√†n th√†nh to√†n b·ªô vi·ªác import d·ªØ li·ªáu!');
  } catch (error) {
    console.log('‚ùå L·ªói t·ªïng:', error.message);
  } finally {
    await db.end();
  }
})();
